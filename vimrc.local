" execute pathogen#infect()
" syntax on
filetype plugin indent on

" syntax enable
set background=dark
set termguicolors
let ayucolor="dark"
colorscheme ayu

let mapleader = ","
set hlsearch
map <Leader><space> :nohl<cr>

vmap gh i{% highlight ruby linedivs %}^M{% endhighlight %}^[O
map <f3> :source ~/.vimrc.local <cr>
map <f4> :call system("kitty @ resize-window --match title:Rake --increment -40 --axis vertical") <cr>
map <f6> :call system("kitty @ close-window --match title:Rake")<cr>
map <f7> :call system("kitty @ resize-window --match title:Rake --increment 40 --axis vertical && kitty @ scroll-window --match title:Rake 40") <cr>
imap <f8> <esc>:w<cr>:call system("kitty @ goto-layout fat && kitty @ send-text --match title:Rake rake\r")<cr>
map <f8> :w<cr>:call system("kitty @ goto-layout fat && kitty @ send-text --match title:Rake rake\r")<cr>
imap <f9> <esc>:w<cr>:call system("kitty @ launch --title=Rake --cwd=current --dont-take-focus --allow-remote-control")<cr>
map <f9> :w<cr>:call system("kitty @ launch --title=Rake --cwd=current --dont-take-focus --allow-remote-control")<cr>

map <f10> :w<cr> :call system("tmux resize-pane -y 10 -t2") <cr>
imap <f10> <esc>:w<cr> :call system("tmux resize-pane -y 10 -t2") <cr>
map <c-s> :w<cr>

map <Leader>g :G<CR>
map <Leader>aa :A<CR>
map <Leader>av :AV<CR>
map <Leader>rr :R<CR>
map <Leader>rv :RV<CR>

map <Leader>n :NERDTreeToggle<CR>

nnoremap <Leader>* *:AgFromSearch<CR>

" Spellcheck for markdown files
autocmd BufRead,BufNewFile *.md setlocal spell
autocmd BufRead,BufNewFile *.markdown setlocal spell

" Autoformat cairo files on save
let g:cairo_linter_autosave = 1

" Java Complete 2
autocmd FileType java setlocal omnifunc=javacomplete#Complete
let g:JavaComplete_SourcesPath = './app'

let g:coc_global_extensions = [
      \ 'coc-css',
      \ 'coc-docker',
      \ 'coc-html',
      \ 'coc-java',
      \ 'coc-json',
      \ 'coc-lists',
      \ 'coc-markdownlint',
      \ 'coc-pairs',
      \ 'coc-python',
      \ 'coc-rls',
      \ 'coc-snippets',
      \ 'coc-solargraph',
      \ 'coc-tsserver',
      \ 'coc-vimlsp',
      \ 'coc-yank'
      \]

nmap <silent> <Leader>, :cclose<CR>

" Alias GBlame to GPraise
for s:cmd in ['Praise']
  if exists(':G' . tolower(s:cmd)) != 2
    exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'
  endif
endfor
unlet s:cmd

set expandtab


" ALE linter settings
let g:airline#extensions#ale#enabled = 1
let g:ale_sign_column_always = 1
 let g:ale_fix_on_save = 1

let g:ale_fixers = {
      \  'javascript': ['eslint'],
      \  'ruby': ['rubocop']
      \}

let g:ale_linters = {
      \  'javascript': ['eslint'],
      \  'ruby': ['brakeman', 'reek']
      \}

" Only run linters named in ale_liners setting
let g:ale_linters_explicit = 1

" Disable ALE auto highlights
let g:ale_set_highlights = 0

let g:blockle_mapping = '<Leader>f'

" CoC mappings
if filereadable($HOME . "/.vimrc.coc")
  source ~/.vimrc.coc
endif
